{
	"info": {
		"_postman_id": "0265f94b-0cc4-44a1-8ae0-b5c8332e1b83",
		"name": "Usuario Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Crear un usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"new_iddd\",data.id);\r",
							"tests[\"No genera error en el Post\"] = responseCode.code === 201;\r",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"nombre\": \" federico gutierrez\",\r\n        \"login\": \"f.guiterrez\",\r\n        \"correo\": \"f.guiterrez@uniandes.edu.co\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un usuario 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"postman.setGlobalVariable(\"new_id_a2\",data.id);\r",
							"tests[\"No genera error en el Post\"] = responseCode.code === 201;\r",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"nombre\": \" federico ramire\",\r\n        \"login\": \"f.ramire\",\r\n        \"correo\": \"f.ramire@uniandes.edu.co\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todos los usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data= JSON.parse(responseBody);\r",
							"tests[\"No genera error en el Gell All\"] = responseCode.code === 200;\r",
							"tests[\"authors count\"] = data.length > 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener un usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(responseBody);\r",
							"var data = JSON.parse(responseBody);\r",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios/{{new_iddd}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios",
						"{{new_iddd}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener un usuario que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No se deberia obtener un autor con un id que no existe\"] = responseCode.code === 404;\r",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"The user with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar un usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(responseBody);\r",
							"var data = JSON.parse(responseBody);\r",
							"tests[\"No genera error en el Put\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"nombre\": \"federigo gutierrez\",\r\n        \"login\": \"federigo gutierrez\",\r\n        \"correo\": \"federigo gutierrez@uniandes.edu.co\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios/{{new_iddd}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios",
						"{{new_iddd}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar un usuario que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No se deberia actualizar un autor con id que no existe\"] = responseCode.code === 404;\r",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"The user with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"nombre\": \" federico gutierrez\",\r\n        \"login\": \"f.guiterrez\",\r\n        \"correo\": \"f.guiterrez@uniandes.edu.co\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borrar un usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios/{{new_iddd}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios",
						"{{new_iddd}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borra un usuario 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios/{{new_id_a2}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios",
						"{{new_id_a2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borra un usuario que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No se deberia borrar un autor con un id que no existe\"] = responseCode.code === 404;\r",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"The user with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/api/usuarios/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"api",
						"usuarios",
						"0"
					]
				}
			},
			"response": []
		}
	]
}